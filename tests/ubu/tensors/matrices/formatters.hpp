#include <cassert>
#include <format>
#include <string>
#include <ubu/miscellaneous/integrals.hpp>
#include <ubu/tensors/matrices/column_major_layout.hpp>
#include <ubu/tensors/matrices/formatters.hpp>
#include <ubu/tensors/matrices/row_major_layout.hpp>
#include <ubu/tensors/views/compose.hpp>
#include <vector>

void test_formatters()
{
  {
    std::vector<int> int_data = {
        1, 200, 3, 45, 5, 600, 700, 800,
        50, 6, 7, 890, 10, 110, 120, 130,
        90, 10, 111, 12, 13, 14, 15, 16,
        1300, 14, 15, 16, 17, 18, 19, 20,
        1400, 24, 25, 26, 27, 28, 29, 30,
        1500, 34, 35, 36, 37, 38, 39, 40,
        1600, 44, 45, 46, 47, 48, 49, 50
    };

    auto int_matrix = ubu::compose(int_data, ubu::row_major_layout(7,8));

    {
      // full int_matrix

      std::string result = ubu::format_matrix(int_matrix);

      std::string expected =
        "+------+-----+-----+-----+----+-----+-----+-----+\n"
        "|    1 | 200 |   3 |  45 |  5 | 600 | 700 | 800 |\n"
        "+------+-----+-----+-----+----+-----+-----+-----+\n"
        "|   50 |   6 |   7 | 890 | 10 | 110 | 120 | 130 |\n"
        "+------+-----+-----+-----+----+-----+-----+-----+\n"
        "|   90 |  10 | 111 |  12 | 13 |  14 |  15 |  16 |\n"
        "+------+-----+-----+-----+----+-----+-----+-----+\n"
        "| 1300 |  14 |  15 |  16 | 17 |  18 |  19 |  20 |\n"
        "+------+-----+-----+-----+----+-----+-----+-----+\n"
        "| 1400 |  24 |  25 |  26 | 27 |  28 |  29 |  30 |\n"
        "+------+-----+-----+-----+----+-----+-----+-----+\n"
        "| 1500 |  34 |  35 |  36 | 37 |  38 |  39 |  40 |\n"
        "+------+-----+-----+-----+----+-----+-----+-----+\n"
        "| 1600 |  44 |  45 |  46 | 47 |  48 |  49 |  50 |\n"
        "+------+-----+-----+-----+----+-----+-----+-----+\n"
      ;

      assert(expected == result);
    }

    {
      // int_matrix with rows elided

      std::string result = ubu::format_matrix(int_matrix, ubu::int2(5,0));

      std::string expected = 
        "+------+-----+-----+-----+----+-----+-----+-----+\n"
        "|    1 | 200 |   3 |  45 |  5 | 600 | 700 | 800 |\n"
        "+------+-----+-----+-----+----+-----+-----+-----+\n"
        "|   50 |   6 |   7 | 890 | 10 | 110 | 120 | 130 |\n"
        "+------+-----+-----+-----+----+-----+-----+-----+\n"
        "|   90 |  10 | 111 |  12 | 13 |  14 |  15 |  16 |\n"
        "+------+-----+-----+-----+----+-----+-----+-----+\n"
        "| 1300 |  14 |  15 |  16 | 17 |  18 |  19 |  20 |\n"
        "+------+-----+-----+-----+----+-----+-----+-----+\n"
        "|  ⋮   |  ⋮  |  ⋮  |  ⋮  | ⋮  |  ⋮  |  ⋮  |  ⋮  |\n"
        "+------+-----+-----+-----+----+-----+-----+-----+\n"
        "| 1600 |  44 |  45 |  46 | 47 |  48 |  49 |  50 |\n"
        "+------+-----+-----+-----+----+-----+-----+-----+\n"
      ;

      assert(expected == result);
    }

    {
      // int_matrix with columns elided

      std::string result = ubu::format_matrix(int_matrix, ubu::int2(0,5));

      std::string expected = 
        "+------+-----+-----+-----+-----+-----+\n"
        "|    1 | 200 |   3 |  45 | ... | 800 |\n"
        "+------+-----+-----+-----+-----+-----+\n"
        "|   50 |   6 |   7 | 890 | ... | 130 |\n"
        "+------+-----+-----+-----+-----+-----+\n"
        "|   90 |  10 | 111 |  12 | ... |  16 |\n"
        "+------+-----+-----+-----+-----+-----+\n"
        "| 1300 |  14 |  15 |  16 | ... |  20 |\n"
        "+------+-----+-----+-----+-----+-----+\n"
        "| 1400 |  24 |  25 |  26 | ... |  30 |\n"
        "+------+-----+-----+-----+-----+-----+\n"
        "| 1500 |  34 |  35 |  36 | ... |  40 |\n"
        "+------+-----+-----+-----+-----+-----+\n"
        "| 1600 |  44 |  45 |  46 | ... |  50 |\n"
        "+------+-----+-----+-----+-----+-----+\n"
      ;

      assert(expected == result);
    }

    {
      // int_matrix with rows and columns elided

      std::string result = ubu::format_matrix(int_matrix, ubu::int2(5,5));

      std::string expected = 
        "+------+-----+-----+-----+-----+-----+\n"
        "|    1 | 200 |   3 |  45 | ... | 800 |\n"
        "+------+-----+-----+-----+-----+-----+\n"
        "|   50 |   6 |   7 | 890 | ... | 130 |\n"
        "+------+-----+-----+-----+-----+-----+\n"
        "|   90 |  10 | 111 |  12 | ... |  16 |\n"
        "+------+-----+-----+-----+-----+-----+\n"
        "| 1300 |  14 |  15 |  16 | ... |  20 |\n"
        "+------+-----+-----+-----+-----+-----+\n"
        "|  ⋮   |  ⋮  |  ⋮  |  ⋮  |  ⋱  |  ⋮  |\n"
        "+------+-----+-----+-----+-----+-----+\n"
        "| 1600 |  44 |  45 |  46 | ... |  50 |\n"
        "+------+-----+-----+-----+-----+-----+\n"
      ;

      assert(expected == result);
    }
  }

  {
    std::vector<double> float_data = {
        1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8,
        9.9, 10.10, 11.11, 12.12, 13.13, 14.14, 15.15, 16.16,
        17.17, 18.18, 19.19, 20.20, 21.21, 22.22, 23.23, 24.24,
        25.25, 26.26, 27.27, 28.28, 29.29, 30.30, 31.31, 32.32,
        33.33, 34.34, 35.35, 36.36, 37.37, 38.38, 39.39, 40.40,
        41.41, 42.42, 43.43, 44.44, 45.45, 46.46, 47.47, 48.48,
        49.49, 50.50, 51.51, 52.52, 53.53, 54.54, 55.55, 56.56
    };

    auto float_matrix = ubu::compose(float_data, ubu::row_major_layout(7,8));

    {
      // full float_matrix

      std::string result = ubu::format_matrix(float_matrix);

      std::string expected =
        "+-------+-------+-------+-------+-------+-------+-------+-------+\n"
        "|   1.1 |   2.2 |   3.3 |   4.4 |   5.5 |   6.6 |   7.7 |   8.8 |\n"
        "+-------+-------+-------+-------+-------+-------+-------+-------+\n"
        "|   9.9 |  10.1 | 11.11 | 12.12 | 13.13 | 14.14 | 15.15 | 16.16 |\n"
        "+-------+-------+-------+-------+-------+-------+-------+-------+\n"
        "| 17.17 | 18.18 | 19.19 |  20.2 | 21.21 | 22.22 | 23.23 | 24.24 |\n"
        "+-------+-------+-------+-------+-------+-------+-------+-------+\n"
        "| 25.25 | 26.26 | 27.27 | 28.28 | 29.29 |  30.3 | 31.31 | 32.32 |\n"
        "+-------+-------+-------+-------+-------+-------+-------+-------+\n"
        "| 33.33 | 34.34 | 35.35 | 36.36 | 37.37 | 38.38 | 39.39 |  40.4 |\n"
        "+-------+-------+-------+-------+-------+-------+-------+-------+\n"
        "| 41.41 | 42.42 | 43.43 | 44.44 | 45.45 | 46.46 | 47.47 | 48.48 |\n"
        "+-------+-------+-------+-------+-------+-------+-------+-------+\n"
        "| 49.49 |  50.5 | 51.51 | 52.52 | 53.53 | 54.54 | 55.55 | 56.56 |\n"
        "+-------+-------+-------+-------+-------+-------+-------+-------+\n"
      ;

      assert(expected == result);
    }

    {
      // float_matrix with rows elided

      std::string result = ubu::format_matrix(float_matrix, ubu::int2(5,0));

      std::string expected =
        "+-------+-------+-------+-------+-------+-------+-------+-------+\n"
        "|   1.1 |   2.2 |   3.3 |   4.4 |   5.5 |   6.6 |   7.7 |   8.8 |\n"
        "+-------+-------+-------+-------+-------+-------+-------+-------+\n"
        "|   9.9 |  10.1 | 11.11 | 12.12 | 13.13 | 14.14 | 15.15 | 16.16 |\n"
        "+-------+-------+-------+-------+-------+-------+-------+-------+\n"
        "| 17.17 | 18.18 | 19.19 |  20.2 | 21.21 | 22.22 | 23.23 | 24.24 |\n"
        "+-------+-------+-------+-------+-------+-------+-------+-------+\n"
        "| 25.25 | 26.26 | 27.27 | 28.28 | 29.29 |  30.3 | 31.31 | 32.32 |\n"
        "+-------+-------+-------+-------+-------+-------+-------+-------+\n"
        "|   ⋮   |   ⋮   |   ⋮   |   ⋮   |   ⋮   |   ⋮   |   ⋮   |   ⋮   |\n"
        "+-------+-------+-------+-------+-------+-------+-------+-------+\n"
        "| 49.49 |  50.5 | 51.51 | 52.52 | 53.53 | 54.54 | 55.55 | 56.56 |\n"
        "+-------+-------+-------+-------+-------+-------+-------+-------+\n"
      ;

      assert(expected == result);
    }

    {
      // float_matrix with rows and columns elided

      std::string result = ubu::format_matrix(float_matrix, ubu::int2(5,5));

      std::string expected = 
        "+-------+-------+-------+-------+-----+-------+\n"
        "|   1.1 |   2.2 |   3.3 |   4.4 | ... |   8.8 |\n"
        "+-------+-------+-------+-------+-----+-------+\n"
        "|   9.9 |  10.1 | 11.11 | 12.12 | ... | 16.16 |\n"
        "+-------+-------+-------+-------+-----+-------+\n"
        "| 17.17 | 18.18 | 19.19 |  20.2 | ... | 24.24 |\n"
        "+-------+-------+-------+-------+-----+-------+\n"
        "| 25.25 | 26.26 | 27.27 | 28.28 | ... | 32.32 |\n"
        "+-------+-------+-------+-------+-----+-------+\n"
        "|   ⋮   |   ⋮   |   ⋮   |   ⋮   |  ⋱  |   ⋮   |\n"
        "+-------+-------+-------+-------+-----+-------+\n"
        "| 49.49 |  50.5 | 51.51 | 52.52 | ... | 56.56 |\n"
        "+-------+-------+-------+-------+-----+-------+\n"
      ;

      assert(expected == result);
    }
  }

  {
    // compatibility with std::format 
    std::vector<int> data = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

    ubu::int2 shape(4, ubu::ceil_div(data.size(), 4));

    {
      // column-major

      auto matrix = ubu::compose(data, ubu::column_major_layout(shape));
      std::string result = std::format("{}", matrix);

      std::string expected =
        "+---+---+---+\n"
        "| 0 | 4 | 8 |\n"
        "+---+---+---+\n"
        "| 1 | 5 | 9 |\n"
        "+---+---+---+\n"
        "| 2 | 6 | X |\n"
        "+---+---+---+\n"
        "| 3 | 7 | X |\n"
        "+---+---+---+\n"
      ;

      assert(expected == result);
    }

    {
      // row-major
      auto matrix = ubu::compose(data, ubu::row_major_layout(shape));
      std::string result = std::format("{}", matrix);

      std::string expected =
        "+---+---+---+\n"
        "| 0 | 1 | 2 |\n"
        "+---+---+---+\n"
        "| 3 | 4 | 5 |\n"
        "+---+---+---+\n"
        "| 6 | 7 | 8 |\n"
        "+---+---+---+\n"
        "| 9 | X | X |\n"
        "+---+---+---+\n"
      ;

      assert(expected == result);
    }
  }
}

